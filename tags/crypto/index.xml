<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>crypto on Leo Young&#39;s Blog</title>
    <link>https://funkyswing.github.io/tags/crypto/</link>
    <description>Recent content in crypto on Leo Young&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 19 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://funkyswing.github.io/tags/crypto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Brave 的“注意力价值”生态</title>
      <link>https://funkyswing.github.io/posts/2020-5-19_how-to-use-brave-browser/</link>
      <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://funkyswing.github.io/posts/2020-5-19_how-to-use-brave-browser/</guid>
      <description>介绍使用 Brave 浏览器“挖矿”之前，先来简单了解 Brave 浏览器。
简介 Brave 浏览器是由 Brendan Eich 于 2015 年创立。Brendan Eich 是 Javascript 发明人，曾任 Mozilla Corporation CEO，可谓是互联网浏览器界先驱人物。
传统互联网巨头以尽可能多搜集用户数据，来定向投放广告和内容。Brave 旨在保护用户隐私，创建新的“注意力”经济系统。目的打破传统互联网以搜集用户数据来投放广告的盈利模式。
Brave 当前用户量日活跃用户 (DAU) 超 400 万，月活跃用户 (MAU) 超 1200 万。
目前 Brave 有几大功能：
 屏蔽搜集数据的广告和追踪器 屏蔽有害广告，增强浏览速度 内置 Tor 浏览器 内置 Brave Rewards 奖励机制  奖励机制 Brave 奖励机制以 Basic Attention Token (BAT) 为基础。主要分为两部分：
   用户浏览广告，可获得相应奖励（目前是每浏览一次奖励 0.1 BAT）
  Brave 浏览器根据用户浏览访问内容和时间，用户可定期按比例向内容作者/网站奖励。用户浏览数据对浏览器完全匿名，私人信息始终在个人设备上储存
   Brave 在机器学习的帮助下建立“注意力价值”生态，保护用户因此的情况下，让广告主能更有针对性发布广告，让用户有更多自主选择权。用户和广告主双赢。
浏览广告“挖矿” 与 POW 和 POS 共识算法不同，BAT 奖励并非参与记账和维护账本安全统一，也没有参与铸币，严格来说仅是单纯的奖励措施。</description>
    </item>
    
    <item>
      <title>VPS 上运行 Grin 全节点</title>
      <link>https://funkyswing.github.io/posts/2020-5-16_running-full-node-in-vps/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://funkyswing.github.io/posts/2020-5-16_running-full-node-in-vps/</guid>
      <description>本文将介绍如何利用 VPS 设置 Grin 全节点。
为什么要设置全节点？  安全。利用自己设置的全节点可以保证交易安全性。 保护隐私。自己的全节点验证交易，保证交易输出和 IP 地址不被泄露。 保证网络稳定。拒绝恶意行为。提高区块同步速度和交易速度。   准备  VPS Linux Debian 10.0  设置： 进入 root：
sudo -i 或建立新超级用户，请参阅这里。
更新系统：
sudo apt-get update 安装必备工具：
sudo apt-get install git nano screen pkg-config 出现提示 Do you want to continue? [Y/n] 输入 Y。
安装相关组件：
sudo apt-get install clang cmake libncurses5-dev libncursesw5-dev zlib1g-dev libssl-dev tor 出现提示 Do you want to continue? [Y/n] 输入 Y。
安装 rust：</description>
    </item>
    
    <item>
      <title>Grin/Mimblewimble 较比特币之优势</title>
      <link>https://funkyswing.github.io/posts/2020-1-05_grin4bitcoiners_zh-cn/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://funkyswing.github.io/posts/2020-1-05_grin4bitcoiners_zh-cn/</guid>
      <description>本篇是本作者翻译的 Grin 文档之一。简单比较 Bitcoin 之间的优劣。
  阅读其他语言版本：Korean、 English  隐私和可互换性 Grin 链上交易有三个隐私特性：
 没有交易地址； 没有交易金额； 两笔交易，一笔输入是另一笔输出，可以在一个区块中混合成为一笔交易，清除所有中间信息。  前两个特性意味着所有交易不可识别。只要直接进行交易，所有输入、输出数据都显示为随机数（专业术语就是“随机曲线点”）。
另外，单个区块中可以添加更多交易。Grin 区块内数据就像是一笔大交易，原始交易所有输入和输出数据都被删除。
扩展性 如上所述，由于 Mimblewimble 交易和区块格式，交易可以合并，一笔输出可以从另一笔的输入直接花费。例如，甲给乙转账，乙之后转账给丙。这一系列交易中可以去除乙的数据，乙的交易数据绝对不会在链上显示。
详细来说，区块间多数交易输出迟早都会变成另笔交易的输入。因此，所有输出花费都可以安全删除。而且假设 Grin 交易量与比特币相当，仅需几个 GB 或更少容量即可存储、下载和验证完整区块。
这就意味着 Grin 区块链可扩展用户数量，而不是交易数量。目前有个问题是：每笔交易需要保留小量数据（“内核”，大约 100 字节）。但开发团队在努力优化。
脚本 或许你听说过 Mimblewimble 协议不支持脚本 (Script)。某种程度上这是事实。但利用密码学方法，许多需要脚本的比特币合约在 Grin 上可以使用椭圆曲线密码学 (Elliptic Curve Cryptography) 实现。迄今为止已知的方法有：
 多签交易 原子交换 时间锁定交易和输出 闪电网络  发行率 比特币出块时间为 10 分钟，初始每个块奖励 50 btc，每四年减半，直到 2100 万比特币全部挖出。Grin 的货币发行率为线性增长，也就是说不会降低。目前为每 60 秒出块，每个区块奖励 60 Grin。这种发行方也有效，因为 1）稀释率逐渐为零；2）每年丢失或销毁的币数量也不小。
常见问答集 什么？没有地址？ 没有地址。Grin 交易中所有输出是单独数据，与之前的输出不共享数据。不用已知地址发送货币，取而代之的是交互式交易，两个（或更多）钱包间彼此交换数据。这种交互方式不需要双方保持同时在线。实际上，有很多方式可以在两个程序间私密安全地进行交互。也可以使用电子邮件或 Signal（或“信鸽”）来进行此种交互通讯。</description>
    </item>
    
    <item>
      <title>秘诺切换简介</title>
      <link>https://funkyswing.github.io/posts/2020-1-05_switch_commitment_zh-cn/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://funkyswing.github.io/posts/2020-1-05_switch_commitment_zh-cn/</guid>
      <description>本篇是本作者翻译的 Grin 文档之一。“秘诺方案”是密码学中非常重要的加密方式，也在加密货币中广泛应用。
 阅读其它语言版本： English
概述 密码学中，秘诺 （或_秘诺方案_）这个概念可以想像成一个加锁的盒子。可以在盒子里放东西（例如一张写着密码的纸），把盒子锁起来，再交给另一个人（或公示）。
另一个方不知道盒子里的密码，但是如果你决定之后按约定公开密码，并要证明这确实是最初你放在盒子里的密码（并未篡改），你仅把盒子钥匙交给另一个人即可证明。
另一个人可以打开盒子，对比盒子里的密码和你刚刚公开的密码，就可以确定盒子上锁后密码没有变更。你提前&amp;rdquo;承诺&amp;ldquo;密码，意味着在秘诺生成和公开之间，你不可以对其做任何修改。
范例 秘诺哈希计算 使用密码学哈希函数即可实现简单的秘诺方案 (commitment scheme)。例如，Alice 和 Bob 想要玩“猜数游戏”。Alice 想出自己的密数 29，由 Bob 来猜。在游戏开始前，Alice 做如下计算：
hash( 29 + r ) 并把结果告诉给 Bob。r 是随机选择的_“致盲因子 (Blinding Factor)”_。之所以需要致盲因子是因为如果没有，Bob 就可以尝试所有可能数字的哈希值，来对比原哈希值。
游戏结束时，Alice 仅需公开自己的密数 29 和盲因子 r。Bob 自己哈希计算结果，即可验证 Alice 在游戏过程中是否更改过密数。
Pedersen Commitment 另外，高阶秘诺方案还有其他特性。例如 Mimblewimble 和机密交易 (Confidential Transactions，CT) 大量使用_同态 (homomorphic)_ 秘诺的 _Pedersen Commitments_。这里的“同态”是指，引用上述“盒子”的比喻，可以使用两个加锁盒子（_盒子 1_ 和_盒子 2_），而且可以将其_“合并”_一起。这样你就得到一个大盒子（仍旧加锁），如果之后打开这个含有密数的大盒子（如上述范例），最终的结果就是_盒子 1_ 和_盒子 2_ 的密数总和。
这个“盒子”的比喻在现实世界中看似不合理，但对椭圆曲线原理无可挑剔。
如需了解关于 Pedersen Commitment 的详情，请参阅《Mimblewimble 和 Grin 简介》</description>
    </item>
    
  </channel>
</rss>